import datetime as dt
from dataclasses import dataclass
from datetime import timedelta as td
from datetime import datetime as dtdt


def input_error(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError:
            return "Give me name and phone please."
        except IndexError:
            return "No found"
        except KeyError:
            return "No such name found"
        except Exception as e:
            return f'Something wrong {e}'
    return inner


@dataclass
class BaseClass:
    value: str

    def __str__(self):
        return str(self.value)


@dataclass
class Name(BaseClass):
    pass


@dataclass
class Birthday(BaseClass):
    def __init__(self, birthday):
        try:
            birthday = dtdt.strptime(birthday, "%Y.%m.%d").date()
        except ValueError:
            raise ValueError("Invalid date format. Use DD.MM.YYYY")


@dataclass
class Phone(BaseClass):
    def __str__(self):
        return self.value if len(self.value) == 10 else f'{self.value} format must be 0970000000'


class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday = None

    def add_phone(self, phone):
        if phone not in map(str, self.phones):
            self.phones.append(Phone(phone))
            print("Contact added")
        else:
            return 'Phone already exists in Addressbook'

    def find_phone(self):
        return '; '.join(map(str, self.phones))

    def edit_phones(self, phone):
        self.phones = [Phone(phone)]
        return self.phones

    def add_birthday(self, birthday):
        if birthday not in map(str, self.birthday):
            self.birthday = Birthday(birthday)
            print("Birthday added")
        else:
            return 'Birthday already exists in Addressbook'

    def __str__(self):
        return f"Contact name: {self.name}, phones: {', '.join(map(str, self.phones))}, birthday: {self.birthday}"


class AddressBook(dict):
    def add_record(self, record):
        if record.name.value not in self:
            self[record.name.value] = record
            return f'{record.name.value} added'
        else:
            return f'{record.name.value} is already in the Addressbook'

    def find_record(self, name):
        return str(self.get(name, f'{name} not found in Addressbook'))

    def delete_record(self, name):
        return f'{name} deleted from Addressbook' if self.pop(name, None) else f'{name} not found in Addressbook'

    def get_upcoming_birthdays(self):
        pass


@input_error
def parse_input(user_input):
    cmd, *args = user_input.split()
    cmd = cmd.strip().lower()
    return cmd, *args


@input_error
def add_contact(args, book):
    name, phone = args
    record = Record(name)
    record.add_phone(phone)
    book.add_record(record)
    return "Contact added."


@input_error
def change_contact(args, book):
    name, phone = args
    for key, record in book.items():
        if key == name:
            record.edit_phones(phone)
            return "Contact changed"
    return "Contact not found"


@input_error
def show_phone(args, book):
    name = args[0]
    record = book.get(name)
    return record.find_phone() if record else f"{name} not found in Addressbook"


def show_all(book):
    for key, record in book.items():
        print(record)


@input_error
def add_birthday(args, book):
    # реалізація
    pass


@input_error
def show_birthday(args, book):
    # реалізація
    pass


@input_error
def birthdays(args, book):
    congratulation_data = []
    today = dtdt.today().date()
    future_day = today + td(days=7)
    # реалізація
    pass
    return congratulation_data


def main():
    print("Welcome to the assistant bot!")
    book = AddressBook()
    while True:
        user_input = input("Enter a command: ")
        command, *args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("Good bye!")
            break
        elif command == "hello":
            print("How can I help you?")
        elif command == "add":
            print(add_contact(args, book))
        elif command == "change":
            print(change_contact(args, book))
        elif command == "phone":
            print(show_phone(args, book))
        elif command == "all":
            show_all(book)
        elif command == "add-birthday":
            print(add_birthday(args, book))
        elif command == "show-birthday":
            print(show_birthday(args, book))
        elif command == "birthdays":
            print(birthdays(args, book))
        else:
            print("Invalid command.")


if __name__ == "__main__":
    main()
